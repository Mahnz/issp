# Help Mallory eavesdrop on the communication between Alice and Bob by correctly guessing
# the ephemeral keys used for One-Time Pad (OTP) encryption.
#
# Mallory knows that the ephemeral keys are 32 bytes long, and that they are generated
# using a Linear Congruential Generator (LCG) with unknown parameters.
#
# Mallory has access to a number of consecutive values generated by the LCG,
# and knows that the modulus m is either a power of 2 or a Mersenne prime
# (i.e. a prime of the form 2^p - 1).
#
# Hint: You will need to solve a system of linear integer equations modulo m.
#       In this very simple case you can solve it with regular arithmetic,
#       making sure to use modular inverses (pow(x, -1, modulus)) instead of division.

import time

from issp import LCG, OTP, Actor, Channel, EncryptionLayer, log


def main() -> None:
    alice = Actor("Alice")
    bob = Actor("Bob")
    mallory = Actor("Mallory")

    channel = Channel()
    alice_bob_rng = LCG()

    # Values known to Mallory.
    values = [alice_bob_rng.next_value() for _ in range(6)]

    # Find the LCG parameters.
    a = 0
    c = 0
    m = 0

    # ...

    log.info("Mallory found the LCG parameters: a=%d, c=%d, m=%d", a, c, m)

    # Mallory can now generate the same sequence of values as Alice and Bob.
    mallory_rng = LCG(a=a, c=c, m=m)
    mallory_rng.set_seed(values[-1])

    alice_bob_cipher = OTP()
    alice_bob_layer = EncryptionLayer(channel, alice_bob_cipher)

    mallory_cipher = OTP()
    mallory_layer = EncryptionLayer(channel, mallory_cipher)

    for i in range(10):
        time.sleep(1.0)
        alice_bob_cipher.key = alice_bob_rng.generate(32)
        message = f"{i}. Hello, Bob! - Alice"
        alice.send(alice_bob_layer, message.encode())

        mallory_cipher.key = mallory_rng.generate(32)
        mallory.receive(mallory_layer)

        bob.receive(alice_bob_layer)


if __name__ == "__main__":
    main()
